---------------------------------------------------------------------------------------
Note:The hand-in in group 8 is identical to that in group 70, because of collaboration.
---------------------------------------------------------------------------------------
Exercise 5.1)
	1)
		# OS:   Linux; 4.4.0-38-generic; amd64
		# JVM:  Oracle Corporation; 1.8.0_91
		# CPU:  null; 4 "cores"
		# Date: 2016-10-05T19:24:07+0200
		countSequential                   14396.3 us     633.53         32
		9592.0
		countParTask1     32               6885.3 us     118.39         64
		9592.0
		countParTask2     32               7196.9 us     206.99         64
		9592.0
		countParTask3     32               7029.4 us     234.09         64
		9592.0
	2)
		# OS:   Linux; 4.4.0-38-generic; amd64
		# JVM:  Oracle Corporation; 1.8.0_91
		# CPU:  null; 4 "cores"
		# Date: 2016-10-05T19:33:27+0200
		countSequential                   15505.4 us    1912.60         32
		9592.0
		countParTask1     32               6803.3 us      82.73         64
		9592.0
		countParTask2     32               7138.8 us     123.35         64
		9592.0
		countParTask3     32               6850.4 us      54.99         64
		9592.0
	3) 	newWorkStealingPool see SRC/newWorkExecutor.ods
		newCachedThreadPool see SRC/newCachedExecutor.ods
		newFixedThreadPool see SRC/newFixedExecutor.ods
	4) 	For number of threads-tasks smaller than the available processors 
		the perfomance seems to be more or less the same. However this does not hold
		when the application scales. Week 5 exercise scale smoothly without any significant 
		diffirence in the running time, while on the other hand, week's fourth exercises 
		does not scale nicely. 
	5) 	newCachedThreadPool:
			# OS:   Linux; 4.4.0-38-generic; amd64
			# JVM:  Oracle Corporation; 1.8.0_91
			# CPU:  null; 4 "cores"
			# Date: 2016-10-05T21:53:21+0200
			countSequential                   14175.7 us      28.13         32
			9592.0
			countParTask1     32               6758.3 us     100.83         64
			9592.0
			countParTask2     32               7128.3 us     145.17         64
			9592.0
			countParTask3     32               7118.2 us      95.32         64
			9592.0
		newWordStealingPool:
			# OS:   Linux; 4.4.0-38-generic; amd64
			# JVM:  Oracle Corporation; 1.8.0_91
			# CPU:  null; 4 "cores"
			# Date: 2016-10-05T21:55:50+0200
			countSequential                   14165.7 us      10.70         32
			9592.0
			countParTask1     32               7038.2 us      57.72         64
			9592.0
			countParTask2     32               7093.7 us     227.97         64
			9592.0
			countParTask3     32               7008.0 us      25.15         64
			9592.0
Exercise 5.2)
	1 - 4)
		Loops                              			 7363.9 ns      26.90        65536
		Creates a Task                        		 3.5 ns          0.00    134217728
		Creates and Cancels a task:            		 171.8 ns       34.85      2097152
		Creates, submits and gets the task:          15832.8 ns    101.50        16384
	5)  The difference in running time seems to be quite observable. For instance the time for just 
		creating a task is 20 times faster, while to create and start the task is about 200
		times faster.
Exercise5.3)
	1 - 4) See TestDownLoad.java Comments: I just moved and i do not have any internet.


Exercise5.4) 
	
