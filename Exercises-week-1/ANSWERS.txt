--------------------------------------------------------------------------------------
Note:The hand-in in group 8 is identical to that in group 70, because of collaboration.
--------------------------------------------------------------------------------------
Exercise 1.1
	1) The final values are lower than 20000000
	2) We get the correct values. The fact that there is a change of failure is the same of the failure itself, and therefore i do not consider the programm correct.
	3)This makes no difference since the operations taken are the same.
	4)The result is not the expected. Since both methods change the state of the class (variable count) the operations should be atomic.
	5) 	i) Result: 10018577, 10033476, 10012910, 6446218, 9294148
			Explanation: The result is relied on whether while the A thread read the value while another thread B writes to it. 
		ii) 10020877, 10016894, 10008836, 10013727, 10013721 
			Explanation: The statements defined in decrement is locked, thus each time that the thread decrements the counter the counter variable is locked and cannot be changed from the increment method, thus all the changes made by the decrement method will be visible and atomic.
		iii) 9963073, 9981024, 9983667, 9991770 
			Explanation: The opposite from ii)
		iv) 10000000 
			Explanation: Every operation is atomic, and changes to the couter will be visible to all threads.
Exercise 1.2
	1) The scenario can be arised when both threads print dash or bar
	2) The reason why this can be prevented by using synchronized is because  each thread that invokes the print method must hold a lock preventing other threads to print.
	3) Inside the print: 
		synchronized(this){
                        System.out.print("-");
                        try{Thread.sleep(50);} catch (InterruptedException e){}
                        System.out.print("|");
                }
	4) Inside the print: 
		 synchronized(Printer.class){
                        System.out.print("-");
                        try{Thread.sleep(50);} catch (InterruptedException e){}
                        System.out.print("|");
                }
Exercise 1.3
	1) It loops forever
	2) It stops
	3) It loops. We should not rely on that since the changes made by main thread may not be visible by other threads.
	4) The JVM specification ensures both fetching and writing operations to be atomic for int variables. Thus, by using the volatile keyword is ensured that any change in the variable will be visible by any other thread.
Exercise 1.4
	1) Sequential result:    3001134
		range 50_000_000
		real	1m13.903s
		user	1m13.904s
		sys	0m0.012s
	2) Parallel10 result:    3001134
		range 50_000_000
		real	0m36.489s
		user	2m21.860s
		sys	0m0.060s
	3) Parallel2 result: 663685 
		range 9_999_999
		without synhcronization	
		real	0m5.473s
		user	0m8.916s
		sys	0m0.008s
	4) It does not matter whether the get method is syncronized, in that case. The reason is that the get method is invoked only by the main thread and once the other thread will have stopped their tasks, thus there will be no concurrent access to the state of the class by the time the get method is invoked. And since the statements in the increment methods are synchronized any change to the count will be visible to all threads. However, in general both get() and set() methods should be synchronized according to Effictive Java Item 66. 
Exercise 1.5)
	1) 1473514.000000, 1569806.000000. The class is not thread-safe.
	2) The reason that the class is not thread safe is because the statements defined in the methods are guarded by different locks. For static methods the Mystery.class runtime object is used while in an instance method the "this" is used.
	3) In order to make the class thread safe we need to lock the statements that change the state of the class with the same lock. Thus, the instance method can be locked using the Mystery.class runtime object.
		public void addInstance(double x) {
        		synchronized(Mystery.class){
                		sum += x;
        		}
  		}
Exercise 1.6
	1) I would synchronize all the methods.
	2) They do not scale well since there will be observed perfomance issues. In case of a synchronized method use by a thread no other thread can use the methods guarded by the same lock("this").
	3) It would not provide thread-safety since statements that affect the state of the class are not atomic, since they are guarded by a different locks. Thus there is change that a thread A might observe the list in inconsistent state. As far as visibility is concerned, i think that the synchronized keyword will make visible any change to the state to any other thread.
Exercise 1.7
	1) A thread can read from and write to totalSize variable by using the static method totalSize() and add() method. Thus these statements should be locked by the same lock.   
	2) We shoud first make the DoubleArrayList class thread safe, since the state of the HashSet is also affected by the object that refers to. Code paths that have access to items, and size variable should be locked using the same lock since both of them participate in the same invariant of the class. Later we can make the allLists immutable.
Exercise 1.8)
	1) The 'value' variable is not the expected because the statements defined inside to the static methods are guarded by different locks; the runtime class object and therefore the operations are not atomic.
	2) We can make the changes:
		class MysteryA {
  			protected static AtomicLong count = new AtomicLong(0);

  			public static void increment() {
        			count.incrementAndGet();
  			}

  			public static long get() {
    				return count.get();
  			}
		}

		class MysteryB extends MysteryA {
  			public static void increment4() {
   	 		count.addAndGet(4) ;
  			}
		}
	 or:
		class MysteryA{
			protected static long count = 0;
			protected static Object lock = new Object();
			
			public static void increment(){
				synchronized(lock){
					count++;
				}
			}
			public static long get(){
				synchronized(lock){
					return count;
				}
			}
		}
		class MysteryB extends MysteryA {
			public static void increment4(){
				syncronized(lock){
					count += 4;
				}
			}
		}


